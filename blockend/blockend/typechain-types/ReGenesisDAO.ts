/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ReGenesisDAO {
  export type BidStruct = {
    bidder: AddressLike;
    planURI: string;
    commitmentStake: BigNumberish;
    exists: boolean;
    votes: BigNumberish;
    selected: boolean;
  };

  export type BidStructOutput = [
    bidder: string,
    planURI: string,
    commitmentStake: bigint,
    exists: boolean,
    votes: bigint,
    selected: boolean
  ] & {
    bidder: string;
    planURI: string;
    commitmentStake: bigint;
    exists: boolean;
    votes: bigint;
    selected: boolean;
  };

  export type MilestoneStruct = {
    amount: BigNumberish;
    approved: boolean;
    withdrawn: boolean;
  };

  export type MilestoneStructOutput = [
    amount: bigint,
    approved: boolean,
    withdrawn: boolean
  ] & { amount: bigint; approved: boolean; withdrawn: boolean };
}

export interface ReGenesisDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReviewer"
      | "addVoter"
      | "approveMilestone"
      | "bids"
      | "bidsCount"
      | "defineMilestones"
      | "finalizeVoting"
      | "fundIdea"
      | "getBid"
      | "getMilestones"
      | "ideaMilestonesURI"
      | "ideas"
      | "ideasCount"
      | "isReviewer"
      | "isVoter"
      | "milestoneApprovals"
      | "milestoneApprovalsCounted"
      | "milestones"
      | "nextWithdrawIndex"
      | "openForAdoption"
      | "owner"
      | "pauseStream"
      | "placeBid"
      | "removeReviewer"
      | "removeVoter"
      | "resumeStream"
      | "reviewerThreshold"
      | "setTreasury"
      | "slashForFailure"
      | "startVoting"
      | "submitIdea"
      | "sweepToTreasury"
      | "treasury"
      | "vote"
      | "winningBidOf"
      | "withdrawApproved"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidPlaced"
      | "Funded"
      | "IdeaOpened"
      | "IdeaSubmitted"
      | "MilestoneApproved"
      | "MilestonesDefined"
      | "PayoutWithdrawn"
      | "ReviewerAdded"
      | "ReviewerRemoved"
      | "Slashed"
      | "StreamPaused"
      | "StreamResumed"
      | "TreasuryChanged"
      | "Voted"
      | "VoterAdded"
      | "VoterRemoved"
      | "VotingFinalized"
      | "VotingStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addReviewer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMilestone",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bidsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defineMilestones",
    values: [BigNumberish, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundIdea",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ideaMilestonesURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ideas", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ideasCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReviewer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "milestoneApprovals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "milestoneApprovalsCounted",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextWithdrawIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openForAdoption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReviewer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashForFailure",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitIdea",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToTreasury",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "winningBidOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawApproved",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defineMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundIdea", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ideaMilestonesURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ideas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ideasCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isReviewer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "milestoneApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "milestoneApprovalsCounted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextWithdrawIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openForAdoption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashForFailure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitIdea", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningBidOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawApproved",
    data: BytesLike
  ): Result;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    bidId: BigNumberish,
    bidder: AddressLike,
    planURI: string,
    commitmentStake: BigNumberish
  ];
  export type OutputTuple = [
    ideaId: bigint,
    bidId: bigint,
    bidder: string,
    planURI: string,
    commitmentStake: bigint
  ];
  export interface OutputObject {
    ideaId: bigint;
    bidId: bigint;
    bidder: string;
    planURI: string;
    commitmentStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    funder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [ideaId: bigint, funder: string, amount: bigint];
  export interface OutputObject {
    ideaId: bigint;
    funder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdeaOpenedEvent {
  export type InputTuple = [ideaId: BigNumberish];
  export type OutputTuple = [ideaId: bigint];
  export interface OutputObject {
    ideaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdeaSubmittedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    submitter: AddressLike,
    metadataURI: string,
    license: BigNumberish,
    licenseProof: BytesLike
  ];
  export type OutputTuple = [
    ideaId: bigint,
    submitter: string,
    metadataURI: string,
    license: bigint,
    licenseProof: string
  ];
  export interface OutputObject {
    ideaId: bigint;
    submitter: string;
    metadataURI: string;
    license: bigint;
    licenseProof: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneApprovedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    mIndex: BigNumberish,
    approver: AddressLike,
    approvals: BigNumberish
  ];
  export type OutputTuple = [
    ideaId: bigint,
    mIndex: bigint,
    approver: string,
    approvals: bigint
  ];
  export interface OutputObject {
    ideaId: bigint;
    mIndex: bigint;
    approver: string;
    approvals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestonesDefinedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    count: BigNumberish,
    milestonesURI: string
  ];
  export type OutputTuple = [
    ideaId: bigint,
    count: bigint,
    milestonesURI: string
  ];
  export interface OutputObject {
    ideaId: bigint;
    count: bigint;
    milestonesURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayoutWithdrawnEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    mIndex: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    ideaId: bigint,
    mIndex: bigint,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    ideaId: bigint;
    mIndex: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewerAddedEvent {
  export type InputTuple = [reviewer: AddressLike];
  export type OutputTuple = [reviewer: string];
  export interface OutputObject {
    reviewer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewerRemovedEvent {
  export type InputTuple = [reviewer: AddressLike];
  export type OutputTuple = [reviewer: string];
  export interface OutputObject {
    reviewer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    amountToTreasury: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    ideaId: bigint,
    amountToTreasury: bigint,
    reason: string
  ];
  export interface OutputObject {
    ideaId: bigint;
    amountToTreasury: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreamPausedEvent {
  export type InputTuple = [ideaId: BigNumberish];
  export type OutputTuple = [ideaId: bigint];
  export interface OutputObject {
    ideaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreamResumedEvent {
  export type InputTuple = [ideaId: BigNumberish];
  export type OutputTuple = [ideaId: bigint];
  export interface OutputObject {
    ideaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryChangedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    bidId: BigNumberish,
    voter: AddressLike
  ];
  export type OutputTuple = [ideaId: bigint, bidId: bigint, voter: string];
  export interface OutputObject {
    ideaId: bigint;
    bidId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterAddedEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRemovedEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingFinalizedEvent {
  export type InputTuple = [
    ideaId: BigNumberish,
    winningBidId: BigNumberish,
    adopter: AddressLike
  ];
  export type OutputTuple = [
    ideaId: bigint,
    winningBidId: bigint,
    adopter: string
  ];
  export interface OutputObject {
    ideaId: bigint;
    winningBidId: bigint;
    adopter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStartedEvent {
  export type InputTuple = [ideaId: BigNumberish, votingEndsAt: BigNumberish];
  export type OutputTuple = [ideaId: bigint, votingEndsAt: bigint];
  export interface OutputObject {
    ideaId: bigint;
    votingEndsAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ReGenesisDAO extends BaseContract {
  connect(runner?: ContractRunner | null): ReGenesisDAO;
  waitForDeployment(): Promise<this>;

  interface: ReGenesisDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReviewer: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  addVoter: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  approveMilestone: TypedContractMethod<
    [ideaId: BigNumberish, mIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  bids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, boolean, bigint, boolean] & {
        bidder: string;
        planURI: string;
        commitmentStake: bigint;
        exists: boolean;
        votes: bigint;
        selected: boolean;
      }
    ],
    "view"
  >;

  bidsCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  defineMilestones: TypedContractMethod<
    [ideaId: BigNumberish, amounts: BigNumberish[], milestonesURI: string],
    [void],
    "nonpayable"
  >;

  finalizeVoting: TypedContractMethod<
    [ideaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundIdea: TypedContractMethod<[ideaId: BigNumberish], [void], "payable">;

  getBid: TypedContractMethod<
    [ideaId: BigNumberish, bidId: BigNumberish],
    [ReGenesisDAO.BidStructOutput],
    "view"
  >;

  getMilestones: TypedContractMethod<
    [ideaId: BigNumberish],
    [ReGenesisDAO.MilestoneStructOutput[]],
    "view"
  >;

  ideaMilestonesURI: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  ideas: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        submitter: string;
        metadataURI: string;
        licenseType: bigint;
        licenseProof: string;
        openForAdoption: boolean;
        votingActive: boolean;
        votingEndsAt: bigint;
        totalFunding: bigint;
        adopter: string;
        slashed: boolean;
      }
    ],
    "view"
  >;

  ideasCount: TypedContractMethod<[], [bigint], "view">;

  isReviewer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isVoter: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  milestoneApprovals: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  milestoneApprovalsCounted: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;

  milestones: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        amount: bigint;
        approved: boolean;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  nextWithdrawIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  openForAdoption: TypedContractMethod<
    [ideaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pauseStream: TypedContractMethod<
    [ideaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  placeBid: TypedContractMethod<
    [ideaId: BigNumberish, planURI: string],
    [bigint],
    "payable"
  >;

  removeReviewer: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  removeVoter: TypedContractMethod<[a: AddressLike], [void], "nonpayable">;

  resumeStream: TypedContractMethod<
    [ideaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  reviewerThreshold: TypedContractMethod<[], [bigint], "view">;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  slashForFailure: TypedContractMethod<
    [ideaId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  startVoting: TypedContractMethod<
    [ideaId: BigNumberish, votingDurationSecs: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitIdea: TypedContractMethod<
    [metadataURI: string, licenseType: BigNumberish, licenseProof: BytesLike],
    [bigint],
    "nonpayable"
  >;

  sweepToTreasury: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [ideaId: BigNumberish, bidId: BigNumberish],
    [void],
    "nonpayable"
  >;

  winningBidOf: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  withdrawApproved: TypedContractMethod<
    [ideaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReviewer"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveMilestone"
  ): TypedContractMethod<
    [ideaId: BigNumberish, mIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint, boolean, bigint, boolean] & {
        bidder: string;
        planURI: string;
        commitmentStake: bigint;
        exists: boolean;
        votes: bigint;
        selected: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bidsCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "defineMilestones"
  ): TypedContractMethod<
    [ideaId: BigNumberish, amounts: BigNumberish[], milestonesURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeVoting"
  ): TypedContractMethod<[ideaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundIdea"
  ): TypedContractMethod<[ideaId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getBid"
  ): TypedContractMethod<
    [ideaId: BigNumberish, bidId: BigNumberish],
    [ReGenesisDAO.BidStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMilestones"
  ): TypedContractMethod<
    [ideaId: BigNumberish],
    [ReGenesisDAO.MilestoneStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "ideaMilestonesURI"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ideas"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        boolean,
        boolean,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        submitter: string;
        metadataURI: string;
        licenseType: bigint;
        licenseProof: string;
        openForAdoption: boolean;
        votingActive: boolean;
        votingEndsAt: bigint;
        totalFunding: bigint;
        adopter: string;
        slashed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ideasCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isReviewer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoter"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "milestoneApprovals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestoneApprovalsCounted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        amount: bigint;
        approved: boolean;
        withdrawn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextWithdrawIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "openForAdoption"
  ): TypedContractMethod<[ideaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseStream"
  ): TypedContractMethod<[ideaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [ideaId: BigNumberish, planURI: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeReviewer"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVoter"
  ): TypedContractMethod<[a: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeStream"
  ): TypedContractMethod<[ideaId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewerThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slashForFailure"
  ): TypedContractMethod<
    [ideaId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<
    [ideaId: BigNumberish, votingDurationSecs: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitIdea"
  ): TypedContractMethod<
    [metadataURI: string, licenseType: BigNumberish, licenseProof: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sweepToTreasury"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [ideaId: BigNumberish, bidId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "winningBidOf"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawApproved"
  ): TypedContractMethod<[ideaId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "IdeaOpened"
  ): TypedContractEvent<
    IdeaOpenedEvent.InputTuple,
    IdeaOpenedEvent.OutputTuple,
    IdeaOpenedEvent.OutputObject
  >;
  getEvent(
    key: "IdeaSubmitted"
  ): TypedContractEvent<
    IdeaSubmittedEvent.InputTuple,
    IdeaSubmittedEvent.OutputTuple,
    IdeaSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneApproved"
  ): TypedContractEvent<
    MilestoneApprovedEvent.InputTuple,
    MilestoneApprovedEvent.OutputTuple,
    MilestoneApprovedEvent.OutputObject
  >;
  getEvent(
    key: "MilestonesDefined"
  ): TypedContractEvent<
    MilestonesDefinedEvent.InputTuple,
    MilestonesDefinedEvent.OutputTuple,
    MilestonesDefinedEvent.OutputObject
  >;
  getEvent(
    key: "PayoutWithdrawn"
  ): TypedContractEvent<
    PayoutWithdrawnEvent.InputTuple,
    PayoutWithdrawnEvent.OutputTuple,
    PayoutWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ReviewerAdded"
  ): TypedContractEvent<
    ReviewerAddedEvent.InputTuple,
    ReviewerAddedEvent.OutputTuple,
    ReviewerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewerRemoved"
  ): TypedContractEvent<
    ReviewerRemovedEvent.InputTuple,
    ReviewerRemovedEvent.OutputTuple,
    ReviewerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Slashed"
  ): TypedContractEvent<
    SlashedEvent.InputTuple,
    SlashedEvent.OutputTuple,
    SlashedEvent.OutputObject
  >;
  getEvent(
    key: "StreamPaused"
  ): TypedContractEvent<
    StreamPausedEvent.InputTuple,
    StreamPausedEvent.OutputTuple,
    StreamPausedEvent.OutputObject
  >;
  getEvent(
    key: "StreamResumed"
  ): TypedContractEvent<
    StreamResumedEvent.InputTuple,
    StreamResumedEvent.OutputTuple,
    StreamResumedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryChanged"
  ): TypedContractEvent<
    TreasuryChangedEvent.InputTuple,
    TreasuryChangedEvent.OutputTuple,
    TreasuryChangedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VoterAdded"
  ): TypedContractEvent<
    VoterAddedEvent.InputTuple,
    VoterAddedEvent.OutputTuple,
    VoterAddedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRemoved"
  ): TypedContractEvent<
    VoterRemovedEvent.InputTuple,
    VoterRemovedEvent.OutputTuple,
    VoterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VotingFinalized"
  ): TypedContractEvent<
    VotingFinalizedEvent.InputTuple,
    VotingFinalizedEvent.OutputTuple,
    VotingFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStarted"
  ): TypedContractEvent<
    VotingStartedEvent.InputTuple,
    VotingStartedEvent.OutputTuple,
    VotingStartedEvent.OutputObject
  >;

  filters: {
    "BidPlaced(uint256,uint256,address,string,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "Funded(uint256,address,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "IdeaOpened(uint256)": TypedContractEvent<
      IdeaOpenedEvent.InputTuple,
      IdeaOpenedEvent.OutputTuple,
      IdeaOpenedEvent.OutputObject
    >;
    IdeaOpened: TypedContractEvent<
      IdeaOpenedEvent.InputTuple,
      IdeaOpenedEvent.OutputTuple,
      IdeaOpenedEvent.OutputObject
    >;

    "IdeaSubmitted(uint256,address,string,uint8,bytes32)": TypedContractEvent<
      IdeaSubmittedEvent.InputTuple,
      IdeaSubmittedEvent.OutputTuple,
      IdeaSubmittedEvent.OutputObject
    >;
    IdeaSubmitted: TypedContractEvent<
      IdeaSubmittedEvent.InputTuple,
      IdeaSubmittedEvent.OutputTuple,
      IdeaSubmittedEvent.OutputObject
    >;

    "MilestoneApproved(uint256,uint256,address,uint256)": TypedContractEvent<
      MilestoneApprovedEvent.InputTuple,
      MilestoneApprovedEvent.OutputTuple,
      MilestoneApprovedEvent.OutputObject
    >;
    MilestoneApproved: TypedContractEvent<
      MilestoneApprovedEvent.InputTuple,
      MilestoneApprovedEvent.OutputTuple,
      MilestoneApprovedEvent.OutputObject
    >;

    "MilestonesDefined(uint256,uint256,string)": TypedContractEvent<
      MilestonesDefinedEvent.InputTuple,
      MilestonesDefinedEvent.OutputTuple,
      MilestonesDefinedEvent.OutputObject
    >;
    MilestonesDefined: TypedContractEvent<
      MilestonesDefinedEvent.InputTuple,
      MilestonesDefinedEvent.OutputTuple,
      MilestonesDefinedEvent.OutputObject
    >;

    "PayoutWithdrawn(uint256,uint256,address,uint256)": TypedContractEvent<
      PayoutWithdrawnEvent.InputTuple,
      PayoutWithdrawnEvent.OutputTuple,
      PayoutWithdrawnEvent.OutputObject
    >;
    PayoutWithdrawn: TypedContractEvent<
      PayoutWithdrawnEvent.InputTuple,
      PayoutWithdrawnEvent.OutputTuple,
      PayoutWithdrawnEvent.OutputObject
    >;

    "ReviewerAdded(address)": TypedContractEvent<
      ReviewerAddedEvent.InputTuple,
      ReviewerAddedEvent.OutputTuple,
      ReviewerAddedEvent.OutputObject
    >;
    ReviewerAdded: TypedContractEvent<
      ReviewerAddedEvent.InputTuple,
      ReviewerAddedEvent.OutputTuple,
      ReviewerAddedEvent.OutputObject
    >;

    "ReviewerRemoved(address)": TypedContractEvent<
      ReviewerRemovedEvent.InputTuple,
      ReviewerRemovedEvent.OutputTuple,
      ReviewerRemovedEvent.OutputObject
    >;
    ReviewerRemoved: TypedContractEvent<
      ReviewerRemovedEvent.InputTuple,
      ReviewerRemovedEvent.OutputTuple,
      ReviewerRemovedEvent.OutputObject
    >;

    "Slashed(uint256,uint256,string)": TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;
    Slashed: TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;

    "StreamPaused(uint256)": TypedContractEvent<
      StreamPausedEvent.InputTuple,
      StreamPausedEvent.OutputTuple,
      StreamPausedEvent.OutputObject
    >;
    StreamPaused: TypedContractEvent<
      StreamPausedEvent.InputTuple,
      StreamPausedEvent.OutputTuple,
      StreamPausedEvent.OutputObject
    >;

    "StreamResumed(uint256)": TypedContractEvent<
      StreamResumedEvent.InputTuple,
      StreamResumedEvent.OutputTuple,
      StreamResumedEvent.OutputObject
    >;
    StreamResumed: TypedContractEvent<
      StreamResumedEvent.InputTuple,
      StreamResumedEvent.OutputTuple,
      StreamResumedEvent.OutputObject
    >;

    "TreasuryChanged(address)": TypedContractEvent<
      TreasuryChangedEvent.InputTuple,
      TreasuryChangedEvent.OutputTuple,
      TreasuryChangedEvent.OutputObject
    >;
    TreasuryChanged: TypedContractEvent<
      TreasuryChangedEvent.InputTuple,
      TreasuryChangedEvent.OutputTuple,
      TreasuryChangedEvent.OutputObject
    >;

    "Voted(uint256,uint256,address)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VoterAdded(address)": TypedContractEvent<
      VoterAddedEvent.InputTuple,
      VoterAddedEvent.OutputTuple,
      VoterAddedEvent.OutputObject
    >;
    VoterAdded: TypedContractEvent<
      VoterAddedEvent.InputTuple,
      VoterAddedEvent.OutputTuple,
      VoterAddedEvent.OutputObject
    >;

    "VoterRemoved(address)": TypedContractEvent<
      VoterRemovedEvent.InputTuple,
      VoterRemovedEvent.OutputTuple,
      VoterRemovedEvent.OutputObject
    >;
    VoterRemoved: TypedContractEvent<
      VoterRemovedEvent.InputTuple,
      VoterRemovedEvent.OutputTuple,
      VoterRemovedEvent.OutputObject
    >;

    "VotingFinalized(uint256,uint256,address)": TypedContractEvent<
      VotingFinalizedEvent.InputTuple,
      VotingFinalizedEvent.OutputTuple,
      VotingFinalizedEvent.OutputObject
    >;
    VotingFinalized: TypedContractEvent<
      VotingFinalizedEvent.InputTuple,
      VotingFinalizedEvent.OutputTuple,
      VotingFinalizedEvent.OutputObject
    >;

    "VotingStarted(uint256,uint256)": TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
    VotingStarted: TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
  };
}
