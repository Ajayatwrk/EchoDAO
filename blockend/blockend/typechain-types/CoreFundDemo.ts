/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CoreFundDemoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProject"
      | "fundProject"
      | "getProject"
      | "projectCount"
      | "projects"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Funded" | "ProjectCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
}

export namespace FundedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    funder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, funder: string, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    funder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    owner: AddressLike,
    name: string,
    description: string
  ];
  export type OutputTuple = [
    projectId: bigint,
    owner: string,
    name: string,
    description: string
  ];
  export interface OutputObject {
    projectId: bigint;
    owner: string;
    name: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoreFundDemo extends BaseContract {
  connect(runner?: ContractRunner | null): CoreFundDemo;
  waitForDeployment(): Promise<this>;

  interface: CoreFundDemoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProject: TypedContractMethod<
    [_name: string, _description: string],
    [void],
    "nonpayable"
  >;

  fundProject: TypedContractMethod<
    [_projectId: BigNumberish],
    [void],
    "payable"
  >;

  getProject: TypedContractMethod<
    [_projectId: BigNumberish],
    [
      [string, string, string, bigint] & {
        owner: string;
        name: string;
        description: string;
        totalFunding: bigint;
      }
    ],
    "view"
  >;

  projectCount: TypedContractMethod<[], [bigint], "view">;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        owner: string;
        name: string;
        description: string;
        totalFunding: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [_name: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundProject"
  ): TypedContractMethod<[_projectId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getProject"
  ): TypedContractMethod<
    [_projectId: BigNumberish],
    [
      [string, string, string, bigint] & {
        owner: string;
        name: string;
        description: string;
        totalFunding: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "projectCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        owner: string;
        name: string;
        description: string;
        totalFunding: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;

  filters: {
    "Funded(uint256,address,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,string,string)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
  };
}
